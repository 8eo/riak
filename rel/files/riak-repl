#!/bin/sh

# /bin/sh on Solaris is not a POSIX compatible shell, but /usr/bin/ksh is.
if [ `uname -s` = 'SunOS' -a "${POSIX_SHELL}" != "true" ]; then
    POSIX_SHELL="true"
    export POSIX_SHELL
    # To support 'whoami' add /usr/ucb to path
    PATH=/usr/ucb:$PATH
    export PATH
    exec /usr/bin/ksh $0 "$@"
fi
unset POSIX_SHELL # clear it so if we invoke other scripts, they run as ksh as well

RUNNER_SCRIPT_DIR={{runner_script_dir}}
RUNNER_SCRIPT=${0##*/}

RUNNER_BASE_DIR={{runner_base_dir}}
RUNNER_ETC_DIR={{runner_etc_dir}}
RUNNER_LOG_DIR={{runner_log_dir}}
RUNNER_USER={{runner_user}}

WHOAMI=$(whoami)

# Make sure this script is running as the appropriate user
if ([ "$RUNNER_USER" ] && [ "x$WHOAMI" != "x$RUNNER_USER" ]); then
    type sudo > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "sudo doesn't appear to be installed and your EUID isn't $RUNNER_USER" 1>&2
        exit 1
    fi
    echo "Attempting to restart script through sudo -H -u $RUNNER_USER"
    exec sudo -H -u $RUNNER_USER -i $RUNNER_SCRIPT_DIR/$RUNNER_SCRIPT $@
fi

# Make sure CWD is set to runner base dir
cd $RUNNER_BASE_DIR

# Extract the target node name from node.args
NAME_ARG=`egrep "^ *-s?name" $RUNNER_ETC_DIR/vm.args`
if [ -z "$NAME_ARG" ]; then
    echo "vm.args needs to have either -name or -sname parameter."
    exit 1
fi

# Learn how to specify node name for connection from remote nodes
echo "$NAME_ARG" | grep '^-sname' > /dev/null 2>&1
if [ "X$?" = "X0" ]; then
    NAME_PARAM="-sname"
    NAME_HOST=""
else
    NAME_PARAM="-name"
    echo "$NAME_ARG" | grep '@.*' > /dev/null 2>&1
    if [ "X$?" = "X0" ]; then
        NAME_HOST=`echo "${NAME_ARG}" | sed -e 's/.*\(@.*\)$/\1/'`
    else
        NAME_HOST=""
    fi
fi

# Extract the target cookie
COOKIE_ARG=`grep '\-setcookie' $RUNNER_ETC_DIR/vm.args`
if [ -z "$COOKIE_ARG" ]; then
    echo "vm.args needs to have a -setcookie parameter."
    exit 1
fi

# Identify the script name
SCRIPT=`basename $0`

# Parse out release and erts info
START_ERL=`cat $RUNNER_BASE_DIR/releases/start_erl.data`
ERTS_VSN=${START_ERL% *}
APP_VSN=${START_ERL#* }

# Add ERTS bin dir to our path
ERTS_PATH=$RUNNER_BASE_DIR/erts-$ERTS_VSN/bin

# Setup command to control the node
NODETOOL="$ERTS_PATH/escript $ERTS_PATH/nodetool $NAME_ARG $COOKIE_ARG"

# Check the first argument for instructions
case "$1" in
    status)
        # Make sure the local node is running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        shift

        $NODETOOL rpc riak_repl_console status $@
        ;;

    add-listener)
        ACTION=$1
        shift
        if [ $# -lt 3 ]; then
            echo "Usage $SCRIPT $ACTION <nodename> <listen_ip> <port>"
            exit 1
        fi
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        $NODETOOL rpc riak_repl_console add_listener $1 $2 $3
        ;;

    add-nat-listener)
        ACTION=$1
        shift
        if [ $# -lt 5 ]; then
            echo "Usage $SCRIPT $ACTION <nodename> <listen_ip> <port> <public_ip> <public_port>"
            exit 1
        fi
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        $NODETOOL rpc riak_repl_console add_nat_listener $1 $2 $3 $4 $5
        ;;


    del-listener)
        ACTION=$1
        shift
        if [ $# -lt 3 ]; then
            echo "Usage $SCRIPT $ACTION <nodename> <listen_ip> <port>"
            exit 1
        fi
        # Make sure the local node is running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        $NODETOOL rpc riak_repl_console del_listener $1 $2 $3
        ;;

    add-site)
        ACTION=$1
        shift
        # Make sure the local node is running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        if [ $# -lt 3 ]; then
            echo "Usage: $SCRIPT $ACTION <ipaddr> <portnum> <sitename>"
            exit 1
        fi
        $NODETOOL rpc riak_repl_console add_site $1 $2 $3
        ;;
   del-site)
        ACTION=$1
        shift
        # Make sure the local node is running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        if [ $# -lt 1 ]; then
            echo "Usage: $SCRIPT $ACTION <sitename>"
            exit 1
        fi
        $NODETOOL rpc riak_repl_console del_site $1
        ;;
    start-fullsync)
        ACTION=$1
        shift
        # Make sure the local node is running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        $NODETOOL rpc riak_repl_console start_fullsync
        ;;
    cancel-fullsync)
        ACTION=$1
        shift
        # Make sure the local node is running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        $NODETOOL rpc riak_repl_console cancel_fullsync
        ;;
    pause-fullsync)
        ACTION=$1
        shift
        # Make sure the local node is running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        $NODETOOL rpc riak_repl_console pause_fullsync
        ;;
    resume-fullsync)
        ACTION=$1
        shift
        # Make sure the local node is running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        $NODETOOL rpc riak_repl_console resume_fullsync
        ;;
#
# Repl2 Commands
#
    clusterstats)
        ACTION=$1
        # Make sure the local node is running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        shift
        if [ $# -lt 1 ]; then
            $NODETOOL rpc riak_repl_console $ACTION
        else
            $NODETOOL rpc riak_repl_console $ACTION $1
        fi
        ;;
    clustername)
        ACTION=$1
        shift
        # Make sure the local node is running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        if [ $# -gt 1 ]; then
            echo "Usage: $SCRIPT $ACTION [<clustername>]"
            exit 1
        fi
        if [ $# -lt 1 ]; then
            $NODETOOL rpc riak_repl_console $ACTION
        else
            $NODETOOL rpc riak_repl_console $ACTION $1
        fi
        ;;
    connections|clusters)
        ACTION=$1
        shift
        # Make sure the local node is running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        if [ $# -gt 0 ]; then
            echo "Usage: $SCRIPT $ACTION"
            exit 1
        fi
        $NODETOOL rpc riak_repl_console $ACTION
        ;;
    connect|disconnect)
        ACTION=$1
        CMD=`echo $ACTION | sed 's/-/_/'`
        shift
        # Make sure the local node is running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        if [ $# -lt 1 ]; then
            case $ACTION in
                connect)
                    echo "Usage: $SCRIPT $ACTION  <host:port>"
                    ;;
                disconnect)
                    echo "Usage: $SCRIPT $ACTION {<host:port> | <clustername>}"
                    ;;
            esac
            exit 1
        fi
        if [ $# -lt 2 ]; then
            # by clustername or ip:port
            $NODETOOL rpc riak_repl_console $CMD $1
        else
            # by IP/Port
            $NODETOOL rpc riak_repl_console $CMD $1 $2
        fi
        ;;
  modes)
        CMD=$1
        shift
        # Make sure the local node is running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        $NODETOOL rpc riak_repl_console $CMD $@
        ;;
    realtime|fullsync)
        ACTION=$1
        shift
        # Make sure the local node is running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        if [ $# -lt 1 ]; then
            echo "Usage: $SCRIPT $ACTION enable <clustername> |"
            echo "                       disable <clustername> |"
            echo "                       start [<clustername>] |"
            echo "                       stop [<clustername>]"
            echo "                       max_fssource_node [<value>] (fullsync only)"
            echo "                       max_fssource_cluster [<value>] (fullsync only)"
            exit 1
        fi
        SUB_CMD=$1
        shift
        case $SUB_CMD in
            enable|disable)
                if [ $# -lt 1 ]; then
                    echo "Usage: $SCRIPT $ACTION {enable|disable} <clustername>"
                    exit 1
                fi
                $NODETOOL rpc riak_repl_console $ACTION $SUB_CMD $1
                ;;
            start|stop)
                if [ $# -lt 1 ]; then
                    $NODETOOL rpc riak_repl_console $ACTION $SUB_CMD
                    exit 1
                else
                    $NODETOOL rpc riak_repl_console $ACTION $SUB_CMD $1
                fi
                ;;
            max_fssource_node)
              if [ "$ACTION" != "fullsync" ]; then
                echo "max_fssource_node is only available for fullsync"
                exit 1
              fi
              NEWVAL=$1
              shift
              # Make sure the local node is running
              RES=`$NODETOOL ping`
              if [ "$RES" != "pong" ]; then
                echo "Node is not running!"
                exit 1
              fi
              $NODETOOL rpc riak_repl_console $SUB_CMD $NEWVAL
              ;;
            max_fssource_cluster)
              if [ "$ACTION" != "fullsync" ]; then
                echo "max_fssource_cluster is only available for fullsync"
                exit 1
              fi
              NEWVAL=$1
              shift
              # Make sure the local node is running
              RES=`$NODETOOL ping`
              if [ "$RES" != "pong" ]; then
                echo "Node is not running!"
                exit 1
              fi
              $NODETOOL rpc riak_repl_console $SUB_CMD $NEWVAL
              ;;
            max_fssink_node)
              if [ "$ACTION" != "fullsync" ]; then
                echo "max_fssink_node is only available for fullsync"
                exit 1
              fi
              NEWVAL=$1
              shift
              # Make sure the local node is running
              RES=`$NODETOOL ping`
              if [ "$RES" != "pong" ]; then
                echo "Node is not running!"
                exit 1
              fi
              $NODETOOL rpc riak_repl_console $SUB_CMD $NEWVAL
              ;;
            *)
                echo "Usage: $SCRIPT $ACTION realtime start [<clustername>] |"
                echo "                       realtime stop [<clustername>]"
                exit 1
                ;;
        esac
        ;;
    *)
        echo "Usage: $SCRIPT { add-listener | del-listener | add-site | del-site | status |"
        echo "                   start-fullsync | cancel-fullsync |"
        echo "                   pause-fullsync | resume-fullsync | add-nat-listener |"
        echo "       Repl2 ----------------------------------------------------------------"
        echo "                   clusterstats [{<ip:-port> | <protocol-id>}] |"
        echo "                              protocol-id = cluster_mgr | rt_repl | fs_repl"
        echo "                   clustername [<localname>] |"
        echo "                   modes [<modelist>]"
        echo "                       modelist is one or both of mode_repl12, mode_repl13 separated by spaces"
        echo "                   connect <host:port> |"
        echo "                   disconnect {<host:port> | clustername} |"
        echo "                   connections |"
        echo "                   realtime enable <clustername> |"
        echo "                   realtime disable <clustername> |"
        echo "                   realtime start [<clustername>] |"
        echo "                   realtime stop [<clustername>] |"
        echo "                   fullsync enable <clustername> |"
        echo "                   fullsync disable <clustername> |"
        echo "                   fullsync start [<clustername>] |"
        echo "                   fullsync stop [<clustername>] |"
        echo "                   fullsync max_fssource_node [<value>] |"
        echo "                   fullsync max_fssource_cluster [<value>] |"
        echo "                   fullsync max_fssink_node [<value]"
        exit 1
        ;;
esac
