* Riak 1.1.2 Release Notes
** Features and Improvements for Riak

This is mainly a stabalization release, adding a few stability improvements
for heavily loaded networks and improving support for running mixed clusters
while migrating to the 1.1.x series.

The frequency that Riak checks whether primary partitions need to be transferred
and also a few other administrative tasks has been lowered from every 30s to
every 10s by default.  It is also configurable on an application environment
variable in app.config.

#+BEGIN_SRC erlangB
  {riak_core, [{vnode_management_timer, #Millisecs}, ...]}
#+END_SRC

*** Replication

Replication bucket properties have been extended to give finer grained control
over how objects are replicated.  This is done via new values for the 'repl'
bucket property:

-{repl, both} - both types of replication, same as {repl, true}
-{repl, fullsync} - only fullsync this bucket, no realtime
-{repl, realtime} - only realtime repl this bucket, no fullsync

Along side the the two existing settings

-{repl, true} - realtime and fullsync replication, a synonym for {repl, both} so
old configurations can be left unchanged
-{repl, false} - disable replication for the bucket

This release also fixes a bug with setting {repl, false} in the
default_bucket_props in the riak_core section of app.config.  Before the setting
was ignored and buckets would be replicated unless they were explicitly disabled.

Heartbeat has been added to the replication protocol so that lost connections
are now detected.

The =repl-repl add-site= can now be used to append additional remote site IPs
without removing the original site while the cluster is running.  It may take
a few minutes for the change to be picked up by the client connection.

** Known Issues

*** [[https://github.com/basho/riak/issues/130][https://github.com/basho/riak/issues/130]]

The /usr/sbin/riak script expects /var/run/riak to exist.  On Fedora and possibly
other Linux distributions /var/run is built on tmpfs, so the directory created
at package install time goes away on reboot and the /usr/sbin/riak script does not
have permissions to recreate it.

As a work around, add this to /etc/rc.local
#+BEGIN_SRC sh
mkdir /var/run/riak && chown -R riak /var/run/riak
#+END_SRC


** Bugs Fixed

-[[https://github.com/basho/erlang_js/issues/18][erlang_js inlines do not work on XCode 4.3]]
-[[https://github.com/basho/riak_sysmon/issues/5][Work-around for net_kernel:get_status() race condition]]
-[[https://github.com/basho/riak_core/issues/152][Handoff reported as started even if rejected for exceeding handoff concurrency]]
-[[https://github.com/basho/riak_core/issues/153][Intermittent hang with handoff sender]]
-[[https://github.com/basho/riak_core/issues/154][handoff of fallback data can be delayed or never performed]]
-[[https://github.com/basho/riak_core/issues/155][Chicken & egg problem with vnode proxy process start & registration?]]
-[[https://github.com/basho/riak_kv/issues/300][Put FSM crashes if forwarded node goes down]]
-[[https://github.com/basho/riak_repl/issues/43][Add heartbeat to repl protocol]]
-[[https://github.com/basho/riak_repl/issues/45][Cannot add IP/ports to existing sites]]
-[[https://github.com/basho/riak_repl/pull/51][Fix repl so it can be disabled in default_bucket_props]]
-[[https://github.com/basho/riak_repl/pull/52][Bump socket send_timeout to 60s, reliability improvement]]
-[[https://github.com/basho/riak_repl/pull/54][Re-read site IPs when the list to try runs out]]

* Riak 1.1.1 Release Notes
** Major Features and Improvements for Riak
*** MapReduce Changes
This release includes fixes for systems with heavy MapReduce load.

Pipe maintains a limit on the number of active worker processes in the system.
Workers are created on demand when the pipe executes - they are not reserved
at pipe creation time.

Prior to 1.1.1 not all fittings (e.g. get object from riak, map value, reduce)
were checking to make sure their output was being delivered to the next stage
of the pipeline.  This has been changed so that the pipe will error if
processing errors or system limits are hit.

As a result of the change if the pipe is overloaded clients will see errors of this form:
={error,<<"Error sending inputs: {error,worker_limit_reached}">>}=

Clients can either decide to retry (preferably with a backoff/retries limit
mechanism) or if the hardware has sufficient capacity the number of workers
per vnode can be increased by setting worker_limit in =etc/app.config=.

={riak_pipe, [{worker_limit, #Workers}]}=

Different numbers of workers are used based on the type of MapReduce query so
tuning will be very workload dependent.

If you are using Javascript MapReduce you will also need to increase the number of
Javascript virtual machines in the =riak_kv= section of =app.config=.

#+BEGIN_SRC erlangB
            {map_js_vm_count,  #MapVMs},
            {reduce_js_vm_count, #ReduceVMs}
#+END_SRC

Again, tuning will be workload dependent.  If sufficient resources are available
setting #MapVMs to the maximum number of JS MapReduce jobs being run in parallel
will give best results and #ReduceVMs set to number of jobs / number of nodes plus
a margin for overload.

** Bugs Fixed
-[[https://github.com/basho/riak_core/issues/144][Map-reduce jobs fail during rolling upgrade to 1.1]]
-[[https://github.com/basho/riak_kv/issues/287][Race Condition causes Javascript VMs to never be returned to VM Pool]]
-[[https://issues.basho.com/show_bug.cgi?id=1258][Avoid {case_clause, ok} errors when vnode backend fails to start]]
-[[https://github.com/basho/riak_jmx/issues/4][riak_jmx crashes due to a startup race condition]]
-[[https://github.com/basho/bitcask/issues/39][Bitcask - Fix incorrect NIF error tuples]]

* Riak 1.1.0 Release Notes
** Major Features and Improvements for Riak
*** Riak Control
-[[http://basho.com/blog/technical/2012/01/30/Riak-in-Production-at-Posterous-Riak-Control-Preview/][Riak Control preview demo]]
-[[https://github.com/basho/riak_control][Riak Control repository with documentation on how to get started]]
*** Riaknostic
-[[http://basho.com/blog/technical/2011/12/15/announcing-riaknostic/][Blog post announcing riaknostic]]
-[[http://riaknostic.basho.com/][Riaknostic Homepage]]
*** Bitcask Improvements
- CRC checks have been added to hintfiles for bitcask
*** LevelDB Improvements
- Snappy (compression algorithm from Google) has been enabled
- The compaction algorithm has been tuned to reduce delays due to compaction
*** Other backend changes
- Multi-backend now supports 2i properly
*** Lager Improvements
- Tracing support (see the [[https://github.com/basho/lager/blob/master/README.org][README]])
- Term printing is ~4x faster and much more correct (compared to io:format)
- Bitstring printing support was added
*** MapReduce Improvements
- The MapReduce interface now supports requests with empty queries. This allows the 2i, list-keys, and search inputs to return matching keys to clients without needing to include a reduce_identity query phase.
- MapReduce error messages have been improved.  Most error cases should now return helpful information all the way to the client, while also producing less spam in Riak's logs.
*** Riak KV Improvements
**** Listkeys Backpressure

Backpressure has been added to listkeys to prevent the node listing keys from being
overwhelemed.  The change has required a protocol change so that the key lister
can limit the rate it receives data.

In mixed clusters where some of the nodes are < 1.1 please set listkeys_backpressure
false in the riak_kv section of app.config until all nodes are upgraded.

={listkeys_backpressure, false}=

Once all nodes are upgraded, set listkeys_backpressue to true in the riak_kv section of app.config

={listkeys_backpressure, true}=

Running nodes can be upgraded without restarting by running this snippet from
the riak console

=application:set_env(riak_kv, listkeys_backpressure, true).=

Fresh 1.1.0 and above installs default to using listkeys backpressure - adjust app.config if
different behavior is desired.

**** Don't drop post-commit errors on floor

In previous releases there is no easy way to determine if a
post-commit hook is failing.  In this release two counters have been
added to =riak-admin status= that will indicate pre/post-commit hook
failures.  They are =precommit_fail= and =postcommit_fail=.  By
default the errors themselves are not logged.  The thought is that a
bad hook could cause unnecessary IO overload.

If the error needs to be discovered then Lager, Riak's logging system,
will allow you to dynamically change the logging level to debug on the
function executing the hook.  To do that you need to =riak attach= on
one of the nodes and run the following.

={ok, Trace} = lager:trace_file("<path>/failing-postcommits", [{module, riak_kv_put_fsm}, {function, decode_postcommit}], debug).=

This will output all post-commit errors to
=<path>/failing-postcommits=.  When you've got enough samples you can
stop the trace like so.

=lager:stop_trace(Trace).=

*** Replication
- Per-bucket replication.
- Pluggable fullsync strategy. Current strategy remains as strategy named =syncv1=
- New fullsync strategy, keylist, that reduces the volume of data exchanged (still
  proportional to the number of objects in a partition, but less overhead).
  The new strategy uses much less memory than the old.
- Tunable TCP send/recv buffers, to cope with slow WAN links. No longer need
  to configure large buffers for all sockets in the kernel.
- Configurable sized worker pools for retrieving/storing objects to bound
  memory consumption and improve performance.
- On reconnect after leader change, the order of partitions to synchronize
  is randomized to improve sync progress on all partitions during failure/
  network partitions.
- Improved internal fault recovery (overhauled erlang process supervision)

**** Replication Bugfixes:
- Secondary IPs are allowed as repl listener IPs.
- Replication can be cancelled while paused.
- Mismatched ring sizes trigger an error.

** Other Additions
*** Default =small_vclock= to be equal to =big_vclock=

If you are using bidirectional cluster replication and you have
overridden the defaults for either of these then you should consider
setting both to the same value.

The default value of =small_vclock= has been changed to be equal to
=big_vclock= in order to delay or even prevent unnecessary sibling
creation in a Riak deployment with bidirectional cluster replication.
When you replicate a pruned vector clock the other cluster will think
it isn't a descendent, even though it is, and create a sibling.  By
raising =small_vclock= to match =big_vclock= you reduce the frequency
of pruning and thus siblings.  Combined with vnode vclocks, sibling
creation, for this particular reason, may be entirely avoided since
the number of entries will almost always stay below the threshold in a
well behaved cluster (i.e. one not under constant node membership
change or network partitions).
** Known Issues
-Luwak has been deprecated in the 1.1 release
-[[https://issues.basho.com/show_bug.cgi?id=1160][bz1160 - Bitcask fails to merge on corrupt file]]
** Bugs Fixed
-[[https://issues.basho.com/show_bug.cgi?id=775][bz775 - Start-up script does not recreate /var/run/riak]]
-[[https://issues.basho.com/show_bug.cgi?id=1283][bz1283 - erlang_js uses non-thread-safe driver function]]
-[[https://issues.basho.com/show_bug.cgi?id=1333][bz1333 - Bitcask attempts to open backup/other files]]
-[[http://basho.com/blog/technical/2012/01/27/Quick-Checking-Poolboy-for-Fun-and-Profit/][Poolboy - Lots of potential bugs fixed, see detailed post by Andrew Thompson]]
*** Lager Specific Bugs Fixed
- #26 - don't make a crash log called 'undefined'
- #28 - R13A support
- #29 - Don't unnecessarily quote atoms
- #31 - Better crash reports for proc_lib processes
- #33 - Don't assume supervisor children are named with atoms
- #35 - Support printing bitstrings (binaries with trailing bits)
- #37 - Don't generate dynamic atoms
