%% @doc where do you want the console.log output:
%% off : nowhere
%% file: the file specified by log.console.file
%% console : standard out
%% both : log.console.file and standard out.
{mapping, "log.console", "lager.handlers", [
  {default, {{console_log_default}} },
  {datatype, {enum, [off, file, console, both]}}
]}.

%% @doc the log level of the console log
{mapping, "log.console.level", "lager.handlers", [
  {default, info},
  {datatype, {enum, [debug, info, warning, error]}}
]}.

%% @doc location of the console log
{mapping, "log.console.file", "lager.handlers", [
  {default, "{{platform_log_dir}}/console.log"}
]}.

%% *gasp* notice the same @mapping!
%% @doc location of the error log
{mapping, "log.error.file", "lager.handlers", [
  {default, "{{platform_log_dir}}/error.log"}
]}.

%% *gasp* notice the same @mapping!
%% @doc turn on syslog
{mapping, "log.syslog", "lager.handlers", [
  {default, off},
  {datatype, {enum, [on, off]}}
]}.

{ translation,
  "lager.handlers",
  fun(Conf) ->
    SyslogHandler = case cuttlefish_util:conf_get_value("log.syslog", Conf) of
      on ->  [{lager_syslog_backend, ["riak", daemon, info]}];
      _ -> []
    end,
    ErrorHandler = case cuttlefish_util:conf_get_value("log.error.file", Conf) of
      undefined -> [];
      ErrorFilename -> [{lager_file_backend, [{file, ErrorFilename}, 
                                              {level, error},
                                              {size, 10485760},
                                              {date, "$D0"},
                                              {count, 5}]}]
    end,

    ConsoleLogLevel = cuttlefish_util:conf_get_value("log.console.level", Conf),
    ConsoleLogFile = cuttlefish_util:conf_get_value("log.console.file", Conf),

    ConsoleHandler = {lager_console_backend, ConsoleLogLevel},
    ConsoleFileHandler = {lager_file_backend, [{file, ConsoleLogFile},
                                                {level, ConsoleLogLevel},
                                                {size, 10485760},
                                                {date, "$D0"},
                                                {count, 5}]},

    ConsoleHandlers = case cuttlefish_util:conf_get_value("log.console", Conf) of
      off -> [];
      file -> [ConsoleFileHandler];
      console -> [ConsoleHandler];
      both -> [ConsoleHandler, ConsoleFileHandler];
      _ -> []
    end,
    SyslogHandler ++ ConsoleHandlers ++ ErrorHandler
  end
}.

%% SASL 
%% We should never care about this
{mapping, "sasl", "sasl.sasl_error_logger", [
  {default, off},
  {datatype, {enum, [on, off]}},
  {level, advanced}
]}.

{ translation,
  "sasl.sasl_error_logger",
  fun(Conf) ->
    case cuttlefish_util:conf_get_value("sasl", Conf) of %%how to pull default?
        on -> true;
        _ -> false
    end
  end
}.

%% Lager Config

%% @doc Whether to write a crash log, and where.
%% Commented/omitted/undefined means no crash logger.
{mapping, "log.crash.file", "lager.crash_log", [
  {default, "./log/crash.log"}
]}.

%% @doc Maximum size in bytes of events in the crash log - defaults to 65536
%% @datatype integer
%% @mapping 
{mapping, "log.crash.msg_size", "lager.crash_log_msg_size", [
  {default, "64KB"},
  {datatype, bytesize}
]}.

%% @doc Maximum size of the crash log in bytes, before its rotated, set
%% to 0 to disable rotation - default is 0
{mapping, "log.crash.size", "lager.crash_log_size", [
  {default, "10MB"},
  {datatype, bytesize}
]}.

%% @doc What time to rotate the crash log - default is no time
%% rotation. See the lager README for a description of this format:
%% https://github.com/basho/lager/blob/master/README.org
{mapping, "log.crash.date", "lager.crash_log_date", [
  {default, "$D0"}
]}.

%% @doc Number of rotated crash logs to keep, 0 means keep only the
%% current one - default is 0
{mapping, "log.crash.count", "lager.crash_log_count", [
  {default, 5},
  {datatype, integer}
]}.

%% @doc Whether to redirect error_logger messages into lager - defaults to true
{mapping, "log.error.redirect", "lager.error_logger_redirect", [
  {default, on},
  {datatype, {enum, [on, off]}}
]}.

{ translation,
  "lager.error_logger_redirect", fun(Conf) -> 
    Setting = cuttlefish_util:conf_get_value("log.error.redirect", Conf), 
    case Setting of
      on -> true;
      off -> false;
      _Default -> true
    end
end}.

%% @doc maximum number of error_logger messages to handle in a second
%% lager 2.0.0 shipped with a limit of 50, which is a little low for riak's startup
{mapping, "log.error.messages_per_second", "lager.error_logger_hwm", [
  {default, 100},
  {datatype, integer}
]}.

%%%% This is the leveldb section

%% @doc leveldb data_root
{mapping, "leveldb.data_root", "eleveldb.data_root", [
  {default, "{{platform_data_dir}}/leveldb"}
]}.

%% @doc The `max_open_files` value is multiplied by 4 megabytes to create a 
%% file cache. The file cache may end up holding more or fewer files at any 
%% given moment due to variations in file metadata size. `max_open_files` 
%% applies to a single vnode, not to the entire server.
{mapping, "leveldb.max_open_files", "eleveldb.max_open_files", [
  {datatype, integer},
  {default, 30},
  {level, advanced}
]}.

%% @doc The cache_size determines the size of each vnode's block cache. The 
%% block cache holds data blocks that leveldb has recently retrieved from 
%% `.sst` table files. Any given block contains one or more complete key/value 
%% pairs. The cache speeds up repeat access to the same key and potential 
%% access to adjacent keys.
{mapping, "leveldb.cache_size", "eleveldb.cache_size", [
  {datatype, bytesize},
  {default, "8MB"},
  {level, advanced}
]}.

%% @doc The 'sync' parameter defines how new key/value data is placed in the 
%% recovery log. The recovery log is only used if the Riak program crashes or 
%% the server loses power unexpectedly. The parameter's original intent was 
%% to guarantee that each new key / value was written to the physical disk 
%% before leveldb responded with “write good”. The reality in modern servers 
%% is that many layers of data caching exist between the database program and 
%% the physical disks. This flag influences only one of the layers.
{mapping, "leveldb.sync", "eleveldb.sync", [
  {default, false},
  {datatype, {enum, [true, false]}},
  {level, advanced}
]}.

%% @doc Each vnode first stores new key/value data in a memory based write 
%% buffer. This write buffer is in parallel to the recovery log mentioned 
%% in the “sync” parameter. Riak creates each vnode with a randomly sized 
%% write buffer for performance reasons. The random size is somewhere 
%% between write_buffer_size_min and write_buffer_size_max.
{mapping, "leveldb.write_buffer_size_min", "eleveldb.write_buffer_size_min", [
  {default, "30MB"},
  {datatype, bytesize},
  {level, advanced}
]}.

{mapping, "leveldb.write_buffer_size_max", "eleveldb.write_buffer_size_max", [
  {default, "60MB"},
  {datatype, bytesize},
  {level, advanced}
]}.

%% @doc Each database .sst table file can include an optional "bloom filter" 
%% that is highly effective in shortcutting data queries that are destined 
%% to not find the requested key. The bloom_filter typically increases the 
%% size of an .sst table file by about 2%. This option must be set to true 
%% in the riak.conf to take effect.
{mapping, "leveldb.bloomfilter", "eleveldb.use_bloomfilter", [
  {default, on},
  {datatype, {enum, [on, off]}}
]}.

{ translation,
  "eleveldb.use_bloomfilter",
  fun(Conf) ->
    case cuttlefish_util:conf_get_value("leveldb.bloomfilter", Conf) of
        on -> true;
        off -> false;
        _ -> true
    end
  end
}.

%% @doc sst_block_size defines the size threshold for a block / chunk of data 
%% within one .sst table file. Each new block gets an index entry in the .sst
%% table file's master index.
{mapping, "leveldb.block_size", "eleveldb.sst_block_size", [
  {default, "4KB"},
  {datatype, bytesize},
  {level, advanced}
]}.

%% @doc block_restart_interval defines the key count threshold for a new key 
%% entry in the key index for a block.
%% Most clients should leave this parameter alone.
{mapping, "leveldb.block_restart_interval", "eleveldb.block_restart_interval", [
  {default, 16},
  {datatype, integer},
  {level, advanced}
]}.

%% @doc verify_checksums controls whether or not validation occurs when Riak
%% requests data from the leveldb database on behalf of the user.
{mapping, "leveldb.verify_checksums", "eleveldb.verify_checksums", [
  {default, true},
  {datatype, {enum, [true, false]}},
  {level, advanced}
]}.

%% @doc verify_compaction controls whether or not validation occurs when 
%% leveldb reads data as part of its background compaction operations.
{mapping, "leveldb.verify_compaction", "eleveldb.verify_compaction", [
  {default, true},
  {datatype, {enum, [true, false]}},
  {level, advanced}
]}.

%%% Things that need to be in vm.args, but never tuned
{mapping, "erlang.smp", "vm_args.-smp", [
  {default, "enable"},
  {level, advanced}
]}.

{mapping, "erlang.W", "vm_args.+W", [
  {default, "w"},
  {level, advanced}
]}.

{mapping, "erlang.K", "vm_args.+K", [
  {default, "true"},
  {level, advanced}
]}.

%%%% Tunables
%% @doc Name of the riak node
{mapping, "nodename", "vm_args.-name", [
  {default, "{{node}}"}
]}. 

%% @doc Cookie for distributed node communication.  All nodes in the same cluster
%% should use the same cookie or they will not be able to communicate.
{mapping, "distributed_cookie", "vm_args.-setcookie", [
  {default, "riak"}
]}.

{mapping, "erlang.async_threads", "vm_args.+A", [
  {default, "64"}
]}.

%% @doc Increase number of concurrent ports/sockets
{mapping, "erlang.max_ports", "vm_args.-env ERL_MAX_PORTS", [
  {default, "64000"}
]}.

%% @doc Tweak GC to run more often 
{mapping, "erlang.fullsweep_after", "vm_args.-env ERL_FULLSWEEP_AFTER", [
  {default, "0"},
  {level, advanced}
]}.

%% @doc Set the location of crash dumps
{mapping, "erlang.crash_dump", "vm_args.-env ERL_CRASH_DUMP", [
  {default, "{{crash_dump}}"}
]}.

%% @doc Raise the ETS table limit
{mapping, "erlang.max_ets_tables", "vm_args.-env ERL_MAX_ETS_TABLES", [
  {default, "256000"}
]}.

%% @doc Raise the default erlang process limit 
{mapping, "erlang.process_limit", "vm_args.+P", [
  {datatype, integer},
  {default, 256000}
]}.

{translation, "vm_args.+P", 
fun(Conf) -> 
  Procs = cuttlefish_util:conf_get_value("process_limit", Conf),
  integer_to_list(Procs)
end}.

%% @doc For nodes with many busy_dist_port events, Basho recommends
%% raising the sender-side network distribution buffer size.
%% 32MB may not be sufficient for some workloads and is a suggested
%% starting point.
%% The Erlang/OTP default is 1024 (1 megabyte).
%% See: http://www.erlang.org/doc/man/erl.html#%2bzdbbl
{mapping, "erlang.zdbbl", "vm_args.+zdbbl", [
  {commented, "32MB"},
  {datatype, bytesize}
]}.

%% @doc Erlang VM scheduler tuning.
%% Prerequisite: a patched VM from Basho, or a VM compiled separately
%% with this patch applied:
%%     https://gist.github.com/evanmcc/a599f4c6374338ed672e
{mapping, "erlang.sfwi", "vm_args.+sfwi", [
  {commented, "500"}
]}.


%% @doc Reading or writing objects bigger than this size will write
%% a warning in the logs.
{mapping, "warn_object_size", "riak_kv.warn_object_size", [
  {datatype, bytesize},
  {default, "5MB"}
]}.

%% @doc Writing an object bigger than this will fail.
{mapping, "max_object_size", "riak_kv.max_object_size", [
  {datatype, bytesize},
  {default, "50MB"}
]}.

%% @doc Writing an object with more than this number of siblings
%% will generate a warning in the logs.
{mapping, "warn_siblings", "riak_kv.warn_siblings", [
  {datatype, integer},
  {default, 25}
]}.

%% @doc Writing an object with more than this number of siblings
%% will fail.
{mapping, "max_siblings", "riak_kv.max_siblings", [
  {datatype, integer},
  {default, 100}
]}.

