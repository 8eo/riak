#+SETUPFILE: "basho-doc-style.iorg"
#+TITLE: Riak Multi-Datacenter Replication Guide
#+OPTIONS: ^:{}
* Overview

  This document is a guide to configuring and managing replication between
  Riak clusters.

* How Replication Works

  Riak replication copies all data from a primary cluster to a
  secondary. Currently it is unidirectional, although you can
  configure a pair of connections to sync bidirectionally between two
  clusters. All data is synchronized on initial connection
  (configurable), followed by streamed updates to the secondary
  cluster and periodic full syncs.

* Concepts
** Listeners

   Replication 'listener' nodes are Riak cluster nodes that will listen on an
   external IP address and port for the purposes of handling Replication
   requests.  Any node in a Riak cluster can participate as a listener - adding
   more nodes will increase the fault-tolerance of the replication process in
   the presence of individual node failures. Listeners are started on
   the primary cluster. These are also called 'servers'.

** Sites

   Replication 'site' nodes are Riak cluster nodes that connect to
   listeners and initiate Replication requests. Site nodes must be
   given a listener node to connect to when started. Sites are started
   on the secondary cluster. These are also called 'clients'.

** Leadership

   Riak replication uses a leadership-election protocol to determine
   which node in the cluster will participate in replication. Only
   one node in each cluster will be responsible for serving as the
   client or server to any other clusters.

   If a client/site connects to a listener that is not the leader, it
   will be redirected to the listener node that is currently the
   leader.

** Full-sync

   On initial connection, the primary cluster (listener/server) will
   initiate a full synchronization with the secondary cluster
   (site/client), which computes hashes of all keys stored in each
   partition of the primary cluster and sends them to the secondary
   cluster. The secondary cluster then calculates its own hashes and
   requests updates for keys that are missing or stale.

   New writes on the primary cluster will be streamed to the secondary
   cluster between synchronization of individual partitions.

   Full-syncs are also performed on a periodic basis, configurable in
   the =riak_repl= section of =app.config=, under the
   =fullsync_interval= parameter. See the "Configuration" section
   below for more details.

** Replication Hooks

   Riak replication allows applications to register replication hooks to control
   when extra objects need to be replicated along with the current object, or
   when an object should not be replicated.

   To register a hook, you must call:

   riak_core:register([{repl_helper, MyMod}])

   Where MyMod defines the following functions:

*** =send_realtime/2= (Object, RiakClient) -> ok | cancel

   This hook controls whether an object replicated in realtime should be sent.
   To send this object, return 'ok', otherwise return 'cancel'.

*** =send/2= (Object, RiakClient) -> ok | cancel | [Objects]

   This hook is used in fullsync replication. As above, you can return ok or
   cancel, but you can also return a list of riak objects to be replicated
   immediately *before* the current object. This is useful for when you have an
   object that refers to other objects (eg. a chunked file) and want to be sure
   all the needed keys are replicated before the key referencing them is
   replicated.

*** =recv/1= (Object) -> ok | cancel

   When an object is received by the client site, this hook is run. You can use
   it to update some metadata, or to deny the object.

* Configuration
** =app.config= Settings

   The configuration for replication is kept in the =riak_repl=
   section of =etc/app.config=.

#+BEGIN_SRC erlang
   {riak_repl, [
                {fullsync_on_connect, true},
                {fullsync_interval, 360},
                {data_root, "data/riak_repl"}
               ]}
#+END_SRC

*** =fullsync_on_connect= (true/false)

    Whether to initiate a fullsync on initial connection from the
    secondary cluster. =true= is the default.

*** =fullsync_interval= (integer, in minutes)

    How often to initiate a full synchronization of data, in
    minutes. This is measured from the completion of one full-sync
    operation to the initiation of the next. This setting only applies
    to the primary cluster (listener). =360= is the default (6
    hours). To disable full synchronization, use =disabled=.

*** =data_root= (string)

    Path (relative or absolute) to the working directory for the
    replication process. =data/riak_repl= is the default.

** The riak-repl Command

   Replication is controlled by the =riak-repl= command. Usage:

#+BEGIN_SRC text
   riak-repl add-listener <nodename> <listen_ip> <port>
   riak-repl del-listener <nodename> <listen_ip> <port>
   riak-repl add-site <ipaddr> <portnum> <sitename>
   riak-repl del-site <sitename>
   riak-repl status
   riak-repl start-fullsync
   riak-repl cancel-fullsync
#+END_SRC

*** add-listener

    Adds a listener (primary) to the given node, IP address and port.

#+BEGIN_SRC text
    riak-repl add-listener riak@10.0.1.156 10.0.1.156 9010
#+END_SRC

*** del-listener

    Removes and shuts down a listener (primary) on the given node, IP
    address and port.

#+BEGIN_SRC text
    riak-repl del-listener riak@10.0.1.156 10.0.1.156 9010
#+END_SRC

*** add-site

    Adds a site (secondary) to the local node, connecting to the
    specified listener.

#+BEGIN_SRC text
    riak-repl add-site 10.0.1.156 9010 newyork
#+END_SRC

*** del-site

    Removes a site (secondary) from the local node by name.

#+BEGIN_SRC text
    riak-repl del-site newyork
#+END_SRC

*** status

    Gets status information about replication. Reports counts on how
    much data has been transmitted, transfer rates, message queue
    lengths of clients and servers, number of fullsyncs, and
    connection status. This command only displays useful information
    on the leader node.

#+BEGIN_SRC text
    riak-repl status
#+END_SRC

*** start-fullsync

    Manually initiates full synchronization with connected sites.

#+BEGIN_SRC text
    riak-repl start-fullsync
#+END_SRC

*** cancel-fullsync

    Cancels any full synchronizations in progress. If a partition is
    in progress, synchronization will stop after that partition
    completes.

#+BEGIN_SRC text
    riak-repl cancel-fullsync
#+END_SRC
